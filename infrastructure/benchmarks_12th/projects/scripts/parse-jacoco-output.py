import argparse
import re
import sys
from bs4 import BeautifulSoup

parser = argparse.ArgumentParser(prog='parse-jacoco-output', description='Parses a XML report file generated by JaCoCo for a given Java class')
parser.add_argument('-f', '--file')

args = parser.parse_args()
file = args.file

with open(file) as fp:
    soup = BeautifulSoup(fp, 'lxml-xml')
    # print(soup.prettify())

    # Get package name from
    # <a href="index.html" class="el_package">__________</a>
    package_name = soup.find('a', class_='el_package').text

    # Get class name from
    # <h1>__________</h1>
    class_name = soup.find('h1').text
    if '.new ' in class_name:
        sys.exit(0)

    # Get all body elements in the 'coverage' table
    # <table class="coverage" cellspacing="0" id="coveragetable">
    #   <thead>
    #     <tr>
    #       <td>...</td>
    #       <td>...</td>
    #     </tr>
    #   </thead>
    #   <tfoot>
    #     <tr>
    #       <td>...</td>
    #       <td>...</td>
    #     </tr>
    #   </tfoot>
    #   <tbody>
    #     ...
    #     <tr>
    #       <td id="a32">
    #         <a href="ByteBuddy.java.html#L153" class="el_method">static {...}</a>
    #       </td>
    #       <td class="bar" id="b1">
    #         <img src="../jacoco-resources/redbar.gif" width="87" height="10" title="117" alt="117"/>
    #         <img src="../jacoco-resources/greenbar.gif" width="29" height="10" title="39" alt="39"/>
    #       </td>
    #       <td class="ctr2" id="c39">25%</td>
    #       <td class="bar" id="d1">
    #         <img src="../jacoco-resources/redbar.gif" width="24" height="10" title="6" alt="6"/>
    #         <img src="../jacoco-resources/greenbar.gif" width="8" height="10" title="2" alt="2"/>
    #       </td>
    #       <td class="ctr2" id="e7">25%</td>
    #       <td class="ctr1" id="f1">4</td>
    #       <td class="ctr2" id="g1">5</td>
    #       <td class="ctr1" id="h0">18</td>
    #       <td class="ctr2" id="i0">28</td>
    #       <td class="ctr1" id="j10">0</td>
    #       <td class="ctr2" id="k1">1</td>
    #     </tr>
    #     ...
    #   </tbody>
    # </table>
    tbody = soup.find('table', class_='coverage').find('tbody').findAll('tr')

    for tr in tbody:
        # Get method name
        method = tr.find('a', class_='el_method')
        if method == None:
            method = tr.find('span', class_='el_method')
        method_name = method.text

        # Get number of branches
        td = tr.findAll('td', class_='bar')
        # td is either composed by one element, which is related to 'instructions',
        # or composed by two elements being the second one related to 'branches':
        #  [0] reports instructions
        #  [1] reports branches
        number_branches = 0
        if len(td) == 2:
            td = td[1]
            missed_branches  = 0
            covered_branches = 0
            for img in td.findAll('img'):
                img_src = img['src']
                if re.search('redbar.gif$', img_src) != None:
                    missed_branches = int(img['alt'])
                elif re.search('greenbar.gif$', img_src) != None:
                    covered_branches = int(img['alt'])
            number_branches = missed_branches + covered_branches

        td = tr.findAll('td', class_='ctr2')
        assert len(td) == 5
        #  [0] reports % of covered instructions
        #  [1] reports % of covered branches
        #  [2] reports complexity
        #  [3] reports number of lines of code
        #  [4] reports number of methods
        # Get complexity
        complexity = td[2].text
        # Get number of lines of code
        loc = td[3].text

        print(package_name + '.' + class_name + ';' + method_name + ';' + str(number_branches) + ';' + str(complexity) + ';' + str(loc))

sys.exit(0)

# EOF
